<section class="fullscreen">
  <div class="fullscreen__body container">
    <h1 tabindex='0' class="parallax-text">Hello, developer! This is my default project with gulp.</h1>
  </div>
  <!-- ? Use if you need a side menu. -->
  <aside id="sidebar1" class="sidebar content__sidebar">
    <button data-open-sidebar="sidebar1" class="sidebar__show-btn" aria-label='show-sidebar' type='button'>
      <svg id='sidebar-svg' version="1.1" height='50' width='50' xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
        viewBox="0 0 16 16" xml:space="preserve">
        <circle cx="8" cy="8" r="8" class="bg" />
        <rect x="2.4" y="5.6" transform="matrix(0.7071 -0.7071 0.7071 0.7071 -3.0849 5.733)" class="top-arrow" width='6' height='2' />
        <rect x="3.6" y="7" width='10' class="center-arrow" height='2' />
        <rect x="2.4" y="8.4" transform="matrix(0.7071 0.7071 -0.7071 0.7071 8.2222 -1.0626)" class="bottom-arrow" width='6' height='2' />
      </svg>
    </button>
    <div class="sidebar__body">
      <div class="sidebar-block sidebar__block">
        This is a sidebar.
      </div>
    </div>
  </aside>
  <button class="fullscreen__scroll" type='button' data-scroll-to=".styles">Scroll</button>
</section>
<section class='styles'>
  <div class='styles__body body'>
    <h2 tabindex='0' class='styles__title title'>styles</h2>
    <p class="styles__text text">
      I am using Stylus. This preprocessor is productive and suitable for everyone.
      Write in any convenient syntax:
    </p>
    <div class="styles__content">
      <pre class="styles__code-block code-block">
      <code> Scss syntax:
.main <span class="styles__r-code">{</span>
  width<span class="styles__r-code">:</span> 100%<span class="styles__r-code">;</span>

  &__body <span class="styles__r-code">{</span>
    someMixnin<span class="styles__r-code">:</span> 20<span class="styles__r-code">;</span>
    someFunc<span class="styles__r-code">:</span> (20, 10)<span class="styles__r-code">;</span>
    background<span class="styles__r-code">:</span> var(--bg)<span class="styles__r-code">;</span>
  <span class="styles__r-code">}</span>
<span class="styles__r-code">}</span></code>
    </pre>

      <pre class="styles__code-block code-block">
      <code> Sass syntax
.main
  width<span class="styles__r-code">:</span> 100%

  &__body
    someMixnin<span class="styles__r-code">:</span> 20
    someFunc<span class="styles__r-code">:</span> (20, 10)
    background<span class="styles__r-code">:</span> var(--bg)</code>
    </pre>

      <pre class="styles__code-block code-block">
      <code> Your syntax
.main
  width 100%<span class="styles__r-code">;</span>

  &__body <span class="styles__r-code">{</span>
    someMixnin<span class="styles__r-code">:</span> 20</span><span class="styles__r-code">;</span>
    someFunc (20, 10)
    background<span class="styles__r-code">:</span> var(--bg)</code>
  <span class="styles__r-code">}</span>
</pre>
    </div>
  </div>
</section>
<section class='scripts'>
  <div class='scripts__body body'>
    <h2 tabindex='0' class='scripts__title title'>scripts</h2>
    <p class="scripts__text text">
      Mostly TypeScript is used here, it is more reliable (and, believe me, it debugs much faster) than JavaScript.
      However, nothing prevents you from using the good old JS.

      The assembly includes many modules that will be useful to you, such as:
    </p>
    <div class="scripts__content">
      <pre class="scripts__code-block code-block">
    <code>
// parallax //
import { Parallax, ParallaxElement } 
  from './modules/parallax.js';

let someParallaxMenu = new Parallax(
  '.fullscreen__body',
  768,

  new ParallaxElement(
    '.fullscreen__bg-img', 5),
)</code>
    </pre>
      <pre class="scripts__code-block code-block">
      <code>
// accordion //
import Accordion 
  from './modules/accord.js';
  
let someAccrod = new Accordion(
  '.accordion__btn',
  '.accordion__item',
  500
)
someAccrod.buttonsActiveClass = 'active'
someAccrod.contentActiveClass = 'active'</code>
    </pre>
    </div>
  </div>
</section>
<section class='images'>
  <div class='images__body body'>
    <h2 tabindex='0' tabindex='0' class='images__title title'>images</h2>
    <p class="images__text text">
      All images (with the exception of svg and possibly something else) will be converted to modern formats and minified.

      By the way, you do not have to connect new ones separately, everything will be done automatically:
    </p>
    <p class="images__big-text">Images => minimize, <code>.webp, .avif.</code></p>

    <div class="images__content">
      <pre class="images__code-block code-block"><code>&lt;img src="img/icons/img.png" alt='yourImg'&gt;</code></pre>

      <pre class="images__code-block code-block">
<code>&lt;picture&gt;
  &lt;source srcset="img/icons/img.avif" 
    type="image/avif"&gt;
  &lt;source srcset="img/icons/img.webp" 
    type="image/webp"&gt;
  &lt;img src="img/icons/img.png" 
    alt='yourImg'&gt;
&lt;/picture&gt;</code></pre>
    </div>
  </div>
</section>
<section class='filter'>
  <div class='filter__body body'>
    <h2 tabindex='0' class='filter__title title'>filter</h2>
    <p class="filter__text text">
      Hides page content by filter principle.
      Can filter on a single value. Doesn't require styles.
    </p>
    <div class="filter__content demo-block">
      <header class="filter__header">
        <button class='filter__button' data-filt-content="red" type='button'>Red</button>
        <button class='filter__button' data-filt-content="green" type='button'>Green</button>
        <button class='filter__button' data-filt-content="yellow" type='button'>Yellow</button>
        <button class='filter__button' data-filt-content="blue" type='button'>Blue</button>
        <button class='filter__button' data-filt-content="all" type='button'>All</button>
      </header>
      <div class="filter__main">
        <div class="filter__item filter__item_green" data-content-type="green">green</div>
        <div class="filter__item filter__item_green" data-content-type="green blue">green & blue</div>
        <div class="filter__item filter__item_blue" data-content-type="blue">blue</div>
        <div class="filter__item filter__item_red" data-content-type="red">red</div>
        <div class="filter__item filter__item_yellow" data-content-type="yellow">yellow</div>
      </div>
    </div>
  </div>
</section>
<section class='demo-spoiler'>
  <div class='demo-spoiler__body body'>
    <h2 tabindex='0' class='demo-spoiler__title title'>spoiler</h2>
    <p class="demo-spoiler__text text">
      Spoilers as they are. Smooth animation, can not be switched while the animation is in progress.
    </p>
    <div class="demo-spoiler__content demo-block">
      <div class="demo-spoiler__spoiler-block">
        <button type="button" class='uspoiler-btn'>Spoiler button</button>
        <ul class='uspoiler-content'>
          <li>spoiler element</li>
          <li>spoiler element</li>
          <li>spoiler element</li>
        </ul>
      </div>
      <div class="demo-spoiler__spoiler-block">
        <button type="button" class='uspoiler-btn'>Spoiler button</button>
        <ul class='uspoiler-content'>
          <li>spoiler element</li>
          <li>spoiler element</li>
          <li>spoiler element</li>
        </ul>
      </div>
      <div class="demo-spoiler__spoiler-block">
        <button type="button" class='uspoiler-btn'>Spoiler button</button>
        <ul class='uspoiler-content'>
          <li>spoiler element</li>
          <li>spoiler element</li>
          <li>spoiler element</li>
        </ul>
      </div>
    </div>
  </div>
</section>

<!--? If you want to use the swiper in a grid container, 
            give some width (minmax, px) for container columns. -->
<section class="swiper container">
  <h2 tabindex='0' class="title">Slider Swiper</h2>
  <p class="swiper__text text">
    Installed and connected automatically, but you can disable it.
  </p>
  <div class="swiper-wrapper">
    <div class="swiper-slide">
      swipe me
    </div>
    <div class="swiper-slide">
      swipe me
    </div>
  </div>
</section>
<section class='el-menu'>
  <div class='el-menu__body body'>
    <h2 tabindex='0' class='el-menu__title title'>element-menu demo</h2>
    <p class="el-menu__text text">
      Sometimes we are required to have a pop-up window in an object, and this is not a problem.
    </p>
    <div class="el-menu__content demo-block">
      <div tabindex='0' class="el-menu__item">
        Lorem ispum <br>
        Ispum lorem <br>
        Ispum Ispum Ispum Ispum <br>
        Lorem Lorem Lorem Lorem
      </div>
      <div tabindex='0' class="el-menu__item">
        Lorem ispum <br>
        Ispum lorem <br>
        Ispum Ispum Ispum Ispum <br>
        Lorem Lorem Lorem Lorem
      </div>
      <div tabindex='0' class="el-menu__item">
        Lorem ispum <br>
        Ispum lorem <br>
        Ispum Ispum Ispum Ispum <br>
        Lorem Lorem Lorem Lorem
      </div>
      <div tabindex='0' class="el-menu__item">
        Lorem ispum <br>
        Ispum lorem <br>
        Ispum Ispum Ispum Ispum <br>
        Lorem Lorem Lorem Lorem
      </div>
    </div>
    <div class="el-menu__menu _non-active">
      Lorem ispum ispum lorem!
    </div>
  </div>
</section>
<section class='accordion'>
  <div class='accordion__body body'>
    <h2 tabindex='0' class='accordion__title title'>Accordion</h2>
    <p class="accordion__text text">
      I always confuse accordions and taps, but that doesn't bother me.
      Has the ability to animate, does not allow you to switch when the animation is on.
    </p>
    <div class="accordion__container demo-block">
      <button aria-label="First element Of accordion" data-toggle-elem-number="0" class="accordion__btn">1</button>
      <button aria-label="Second element Of accordion" data-toggle-elem-number="1" class="accordion__btn">2</button>
      <button aria-label="Third element Of accordion" data-toggle-elem-number="2" class="accordion__btn">3</button>
      <div class="accordion__items">
        <pre class="accordion__item" lang="ru_RU">
1
Небо пустого цвета.Нас пожирает листопад
Исход из слепого лета и вслед погоня наугад
Кипит колокольный лепет,дымят забытые войска

А вдруг всё то,что ищем
обретается при вскрытии
телесного родного дорогого себя</pre>
        <pre class="accordion__item" lang="ru_RU">
2
Снега провожают дикий и лихорадочный поход
Вечерние густые лики,безостановочный народ
Бессмертные и живые в одной оскаленной цепи

А вдруг всё то,что ищем —
далеко за горизонтом
на смертельной истребительной дороге всё на север</pre>
        <pre class="accordion__item" lang="ru_RU">
3
Зашить ледяную рану и впредь давиться леденцом
Шагать тяжело,упрямо или катиться колесом
Заглядывать в чужие окна,пытать счастливые дома —

А вдруг всё то,что ищем
прямо где-то здесь смеётся
например—внутри зеркально-новогоднего фонарика

Вселенская Большая Любовь
Вселенская Большая Любовь
Вселенская Большая Любовь

Моя волшебная игрушка в пустоте
Моя голодная копилка в пустоте
Моя секретная калитка в пустоте</pre>
      </div>
    </div>
  </div>
</section>
<section class='demo-submenu'>
  <div class='demo-submenu__body body'>
    <h2 tabindex='0' class='demo-submenu__title title'>submenu</h2>
    <p class="demo-submenu__text text">
      Does it need comments?
    </p>
    <div class="demo-submenu__content demo-block">
      <button class="submenu-button demo-submenu__button">
        submenu
        <ul class='demo-submenu__ul submenu submenu_center'>
          <li>
            <a target="_self" rel="noopener" href="#">here could be your content</a>
          </li>
        </ul>
      </button>
      <button class="submenu-button demo-submenu__button demo-submenu__button-2">
        submenu
        <ul class='demo-submenu__ul demo-submenu__ul-2 submenu submenu_center'>
          <li>
            <a target="_self" rel="noopener" href="#">here could be your content</a>
          </li>
        </ul>
      </button>
    </div>
  </div>
</section>
<section class='animation-by-scroll'>
  <div class='animation-by-scroll__body body'>
    <h2 tabindex='0' class='animation-by-scroll__title title'>Animation by scroll</h2>
    <p class="animation-by-scroll__text text">
      Assigns a class when scrolling to an element. Delay can be applied, there are even media queries. <br>
      If you want to view the animation again, scroll to the side. This can be disabled in the settings.
    </p>
    <div class="animation-by-scroll__content">
      <div class="animation-by-scroll__item demo-block">
        <h3 class="animation-by-scroll__item-title">Some title</h3>
        <pre class="animation-by-scroll__item-text" lang="ru_RU">
Мы хотим видеть дальше
Чем окна дома напротив
Мы хотим жить, мы живучи как кошки
И вот мы пришли заявить
О своих правах, да
Слышишь шелест плащей, это мы
Дальше действовать будем мы
        </pre>
      </div>
      <div class="animation-by-scroll__item demo-block animation-by-scroll__item-2">
        <h3 class="animation-by-scroll__item-title">Some title</h3>
        <pre class="animation-by-scroll__item-text" lang="ru_RU">
Мы родились в тесных квартирах
Новых районов
Мы потеряли невинность
В боях за любовь
Нам уже стали тесны одежды
Сшитые вами для нас одежды
И вот мы пришли сказать вам о том
Что дальше 
Дальше действовать будем мы
        </pre>
      </div>
    </div>
  </div>
</section>
<section class='packages'>
  <div class='packages__body body'>
    <h2 tabindex='0' class='packages__title title'>used packages</h2>
    <div class="packages__content">
      <ul>
        <li>browser-sync</li>
        <li>del</li>
        <li>gulp</li>
        <li>gulp-autoprefixer</li>
        <li>gulp-avif-webp-html</li>
        <li>gulp-clean-css</li>
        <li>gulp-file-include</li>
        <li>gulp-group-css-media-queries</li>
        <li>gulp-imagemin</li>
        <li>gulp-libsquoosh,</li>
        <li>gulp-rename,</li>
        <li>gulp-stylus</li>
        <li>gulp-terser</li>
        <li>gulp-ttf2woff2</li>
        <li>gulp-typescript</li>
        <li>gulp-util</li>
        <li>typescript</li>
        <li>replace-in-file</li>
        <li>fs-extra</li>
        <li>readline-sync</li>
      </ul>
    </div>
  </div>
</section>
<section class='special-thanks'>
  <div class='special-thanks__body body demo-block'>
    <h3 tabindex='0' class='special-thanks__title'>Special thanks:</h3>
    <div class="special-thanks__text">
      The author of the idea, based on his video, a lot of functionality was made: <br>
      Фрилансер по жизни: <a href="#">https://www.youtube.comc/FreelancerLifeStyle</a>
    </div>
    <div class="special-thanks__text">
      To the authors of all gulp packages used in this build.
    </div>
    <div class="special-thanks__text">
      To You! :3
    </div>
  </div>
</section>